version: "3.3"
services:
  postgres_loan:
    image: postgres:latest
    networks:
      - kafka-net
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    ports:
      - "5432:5432"

  zookeeper:
    image: zookeeper:3.6.1
    container_name: zookeeper
    restart: always
    networks:
      - kafka-net
    ports:
      - "2181:2181"

  #  kafka_local:
  #  image: wurstmeister/kafka:2.12-2.5.0
  #  container_name: kafka_local
  #  restart: always
  #  networks:
  #    - kafka-net
  #  ports:
  #    - "9093:9092"
  #  environment:
  #    KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
  #    KAFKA_LISTENERS: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:9092
  #    KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
  #    KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
  #    KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
  #    KAFKA_BROKER_ID: 1
  #    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #    depends_on:
#      - zookeeper

  kafka:
    image: wurstmeister/kafka:2.12-2.5.0
    container_name: kafka
    restart: always
    networks:
      - kafka-net
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper

  redis:
    image: "redis:6"
    networks:
      - kafka-net
    ports:
      - 6379:6379

  prometheus:
    image: prom/prometheus:latest
    restart: always
    networks:
      - kafka-net
    ports:
      - "9090:9090"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  loki:
    image: grafana/loki:latest
    restart: always
    user: root
    networks:
      - kafka-net
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml

  apicurio-registry:
    image: apicurio/apicurio-registry
    restart: always
    networks:
      - kafka-net
    ports:
      - "8081:8080"
    environment:
      QUARKUS_PROFILE: prod

  promtail:
    image: grafana/promtail:latest
    restart: always
    networks:
      - kafka-net
    volumes:
      - ./promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki

  grafana:
    image: grafana/grafana:latest
    restart: always
    networks:
      - kafka-net
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
      - loki

  jaeger:
    image: jaegertracing/all-in-one:latest
    restart: always
    networks:
      - kafka-net
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686" #dash
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
      - "4317:4317"   # OTLP gRPC (para OpenTelemetry)
      - "4318:4318"   # OTLP HTTP
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true

  app:
    image: fabricio211/app
    restart: always
    networks:
      - kafka-net
    ports:
      - "8080:8080"
      - "9000:9000"
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres_loan:5432/postgres
      QUARKUS_DATASOURCE_USERNAME: root
      QUARKUS_DATASOURCE_PASSWORD: root
      KAFKA_HOST: kafka
      REDIS_HOST: redis
      QUARKUS_APP: quarkus-app
      JAEGER_HOST: jaeger
      MP_MESSAGING_CONNECTOR_SMALLRYE-KAFKA_APICURIO_REGISTRY_URL: http://apicurio-registry:8080/apis/registry/v2
      MP_MESSAGING_INCOMING_MOVIES-IN_APICURIO_REGISTRY_URL: http://apicurio-registry:8080/apis/registry/v2
      MP_MESSAGING_OUTGOING_MOVIES-OUT_APICURIO_REGISTRY_URL: http://apicurio-registry:8080/apis/registry/v2

    depends_on:
      - postgres_loan
      - kafka
      - redis
      - jaeger
      - loki
      - apicurio-registry
networks:
  kafka-net:
    name: kafka-net
    driver: bridge

volumes:
  prometheus-data:
  grafana-data:
  loki-data: